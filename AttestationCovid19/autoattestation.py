#!/usr/bin/env python3
# Generated by Selenium IDE

import os, time, sys
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from PyPDF2 import PdfFileReader, PdfFileWriter
import configparser, getopt
from pprint import pprint

class attestation(object):

  def __init__(self,outputdir):
    options = webdriver.FirefoxProfile()
    options.set_preference("browser.download.folderList", 2)
    options.set_preference("browser.download.dir", outputdir)
    options.set_preference("browser.download.useDownloadDir", True)
    options.set_preference("browser.download.viewableInternally.enabledTypes", "")
    options.set_preference("browser.helperApps.neverAsk.saveToDisk", "application/pdf")
    options.set_preference("pdfjs.disabled", True);

    self.driver = webdriver.Firefox(options)

  def destroy(self):
    self.driver.quit()

  def build_attest(self, person, heure, date, motifs):
    print ("Attestation pour : ", end="")
    print (person["prenom"],person["nom"],str(date),str(heure),motifs)
  
    self.driver.get("https://media.interieur.gouv.fr/deplacement-covid-19/")
    self.driver.find_element(By.ID, "field-firstname").send_keys(person["prenom"])
    self.driver.find_element(By.ID, "field-lastname").send_keys(person["nom"])
    self.driver.find_element(By.ID, "field-birthday").send_keys(person["datenaissance"])
    self.driver.find_element(By.ID, "field-placeofbirth").send_keys(person["lieunaissance"])
    self.driver.find_element(By.ID, "field-address").send_keys(person["rue"])
    self.driver.find_element(By.ID, "field-city").send_keys(person["ville"])
    self.driver.find_element(By.ID, "field-zipcode").send_keys(person["codepostal"])
    self.driver.find_element(By.ID, "field-heuresortie").send_keys(heure)
    self.driver.find_element(By.ID, "field-datesortie").send_keys(date)
    for motif in motifs:
      self.driver.find_element(By.ID, "checkbox-"+motif).click()
    self.driver.find_element(By.CSS_SELECTOR, "#generate-btn > span").click()
  
def fetch_page(tmpdir):
  for root, dirs, files in os.walk(tmpdir, topdown=True):
    for name in files:
      filename=os.path.join(root, name)
      pdf_reader = PdfFileReader(open(filename, 'rb'))
      page=pdf_reader.getPage(0)
      os.unlink(filename)
      return(page)
     
  
###########################################################################################
# Main
###########################################################################################


try:
  os.makedirs(tmpdir)
except:
  pass

# defaults 
tmpdir="/tmp/attestationcovidtmp"

users=["tom"]
motifs=["travail"]
date=datetime.today().strftime('%Y-%m-%d')
heure=datetime.today().strftime('%H:%M')

try:
  options, remainder = getopt.gnu_getopt(sys.argv[1:], 
                                         'u:m:d:h:', 
                                         ['user=','motif=','date=','heure='])
except:
  pass 

for opt,arg in options: 
  if (opt in ('-u','--user')): users=arg.split(",")
  if (opt in ('-m','--motif')): motifs=arg.split(",")
  if (opt in ('-d','--date')): date=arg
  if (opt in ('-h','--heure')): heure=arg

config=configparser.ConfigParser()
config.read('users.ini')

builder=attestation(tmpdir)
pdf_writer=PdfFileWriter()

for user in users:
  demandeur = {}
  for key in config[user]:
    demandeur[key]=config[user][key]

  builder.build_attest(demandeur,heure=heure,date=date,motifs=motifs)
  time.sleep(5)
  pdf_writer.addPage(fetch_page(tmpdir))
  
builder.destroy() 

with open("attestations.pdf",'wb') as out:
  pdf_writer.write(out)
